generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id(map: "idx_65536_PRIMARY") @default(cuid()) @db.VarChar(191)
  userId            String  @db.VarChar(191)
  type              String  @db.VarChar(191)
  provider          String  @db.VarChar(191)
  providerAccountId String  @db.VarChar(191)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String? @db.VarChar(191)
  scope             String? @db.VarChar(191)
  id_token          String?
  session_state     String? @db.VarChar(191)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "idx_65536_Account_provider_providerAccountId_key")
  @@index([userId], map: "idx_65536_Account_userId_idx")
}

model Session {
  id           String   @id(map: "idx_65560_PRIMARY") @default(cuid()) @db.VarChar(191)
  sessionToken String   @unique(map: "idx_65560_Session_sessionToken_key") @db.VarChar(191)
  userId       String   @db.VarChar(191)
  expires      DateTime @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_65560_Session_userId_idx")
}

model User {
  id               String            @id(map: "idx_65577_PRIMARY") @default(cuid()) @db.VarChar(191)
  name             String?           @db.VarChar(191)
  email            String            @unique(map: "idx_65577_User_email_key") @db.VarChar(191)
  emailVerified    DateTime?         @db.Timestamp(6)
  image            String?           @db.VarChar(191)
  role             String            @default("user") @db.VarChar(191)
  password         String?           @db.VarChar(191)
  address          String?
  city             String?           @db.VarChar(191)
  zipCode          String?           @db.VarChar(191)
  phone            String?           @db.VarChar(191)
  lastLogin        DateTime?         @db.Timestamp(6)
  preferences      Json?             @db.Json
  accounts         Account[]
  sessions         Session[]
  trainings        Training[]
  registrations    Registration[]
  sentRequests     TrainingRequest[] @relation("user")
  receivedRequests TrainingRequest[] @relation("trainer")
}

model VerificationToken {
  identifier String   @db.VarChar(191)
  token      String   @unique(map: "idx_65583_VerificationToken_token_key") @db.VarChar(191)
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token], map: "idx_65583_VerificationToken_identifier_token_key")
}

model Invitation {
  id        String   @id(map: "idx_65541_PRIMARY") @default(cuid()) @db.VarChar(191)
  email     String   @db.VarChar(191)
  name      String?  @db.VarChar(191)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  role      String   @default("user") @db.VarChar(191)
}

model Training {
  id            String         @id(map: "idx_65565_PRIMARY") @default(cuid()) @db.VarChar(191)
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  start         DateTime       @db.Timestamptz(6)
  end           DateTime       @db.Timestamptz(6)
  description   String?
  maxInterns    Int
  authorId      String         @db.VarChar(191)
  address       String?        @db.VarChar(191)
  city          String?        @db.VarChar(191)
  zipCode       String?        @db.VarChar(191)
  registrations Registration[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId], map: "idx_65565_Training_authorId_idx")
}

model Registration {
  id         String   @id(map: "idx_65554_PRIMARY") @default(cuid()) @db.VarChar(191)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  trainingId String   @db.VarChar(191)
  userId     String   @db.VarChar(191)
  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([trainingId, userId], map: "idx_65554_Registration_trainingId_userId_key")
  @@index([trainingId], map: "idx_65554_Registration_trainingId_idx")
  @@index([userId], map: "idx_65554_Registration_userId_idx")
}

model PasswordResetToken {
  id        String   @id(map: "idx_65548_PRIMARY") @default(cuid()) @db.VarChar(191)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  email     String   @db.VarChar(191)
  secret    String   @unique(map: "idx_65548_PasswordResetToken_secret_key") @db.VarChar(191)
  expires   DateTime @db.Timestamptz(6)

  @@unique([secret, email], map: "idx_65548_PasswordResetToken_secret_email_key")
}

model TrainingRequest {
  id        String   @id(map: "idx_65571_PRIMARY") @default(cuid()) @db.VarChar(191)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  userId    String   @db.VarChar(191)
  trainerId String   @db.VarChar(191)
  message   String?  @db.VarChar(191)
  user      User     @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  trainer   User     @relation("trainer", fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([trainerId], map: "idx_65571_TrainingRequest_trainerId_idx")
  @@index([userId], map: "idx_65571_TrainingRequest_userId_idx")
}

model PushSubscription {
  id        String   @id
  createdAt DateTime @default(now())
  userId    String
  endpoint  String
  keys      Json

  @@index([userId])
}
