generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String            @id @default(cuid())
  name             String
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  role             String            @default("user")
  password         String?
  address          String?
  phone            String?
  lastLogin        DateTime?
  preferences      Json?             @db.Json
  description      String?
  accounts         Account[]
  sessions         Session[]
  trainings        Training[]
  registrations    Registration[]
  sentRequests     TrainingRequest[] @relation("user")
  receivedRequests TrainingRequest[] @relation("trainer")
  teams            UserOnTeam[]
  ownedTeams       Team[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  name      String
  address   String?
  phone     String?
  createdAt DateTime @default(now())
  role      String   @default("user")
}

model Training {
  id            String         @id @default(cuid())
  cancelledAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?
  start         DateTime
  end           DateTime
  description   String?
  maxInterns    Int
  authorId      String
  address       String?
  registrations Registration[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Registration {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  trainingId String
  userId     String
  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([trainingId, userId])
  @@index([trainingId])
  @@index([userId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  email     String
  secret    String   @unique
  expires   DateTime

  @@unique([secret, email])
}

model TrainingRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  trainerId String
  message   String?
  user      User     @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  trainer   User     @relation("trainer", fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([trainerId])
  @@index([userId])
}

model Team {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  name      String
  ownerId   String
  owner     User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  users     UserOnTeam[]
  licenseId String?
  license   TeamLicense? @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([licenseId])
}

model UserOnTeam {
  userId    String
  teamId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model TeamLicense {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  expirationDate DateTime
  teamId         String
  team           Team[]
}
